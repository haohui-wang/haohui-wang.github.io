<?xml version="1.0" encoding="utf-8"?>


<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="zh-CN">
    <title type="text">whh伍叁零</title>
    <subtitle type="html">whh530的个人网站</subtitle>
    <updated>2021-05-10T21:37:25&#43;08:00</updated>
    <id>https://haohui-wang.github.io/</id>
    <link rel="alternate" type="text/html" href="https://haohui-wang.github.io/" />
    <link rel="self" type="application/atom&#43;xml" href="https://haohui-wang.github.io/atom.xml" />
    <author>
            <name>whh530</name>
            <uri>https://haohui-wang.github.io/</uri>
            
                <email>wang.haohui@outlook.com</email>
            </author>
    <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights>
    <generator uri="https://gohugo.io/" version="0.83.1">Hugo</generator>
        <entry>
            <title type="text">编译原理: 第七章</title>
            <link rel="alternate" type="text/html" href="https://haohui-wang.github.io/posts/compilers-ch7/" />
            <id>https://haohui-wang.github.io/posts/compilers-ch7/</id>
            <updated>2021-05-10T21:22:36&#43;08:00</updated>
            <published>2021-05-10T00:00:00&#43;00:00</published>
            <author>
                    <name>whh530</name>
                    <uri>https://haohui-wang.github.io/</uri>
                    <email>wang.haohui@outlook.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">运行时刻环境 空间的栈式分配 活动树 活动记录 调用代码序列 栈中的变长数据 栈中非局部数据的访……</summary>
            
                <content type="html">&lt;h1 id=&#34;运行时刻环境&#34;&gt;运行时刻环境&lt;/h1&gt;
&lt;h2 id=&#34;空间的栈式分配&#34;&gt;空间的栈式分配&lt;/h2&gt;
&lt;h3 id=&#34;活动树&#34;&gt;活动树&lt;/h3&gt;
&lt;h3 id=&#34;活动记录&#34;&gt;活动记录&lt;/h3&gt;
&lt;h3 id=&#34;调用代码序列&#34;&gt;调用代码序列&lt;/h3&gt;
&lt;h3 id=&#34;栈中的变长数据&#34;&gt;栈中的变长数据&lt;/h3&gt;
&lt;h2 id=&#34;栈中非局部数据的访问&#34;&gt;栈中非局部数据的访问&lt;/h2&gt;
&lt;h2 id=&#34;堆管理&#34;&gt;堆管理&lt;/h2&gt;
&lt;h2 id=&#34;垃圾回收&#34;&gt;垃圾回收&lt;/h2&gt;
</content>
            
            
            
            
            
                
                    
                
                    
                
            
        </entry>
    
        <entry>
            <title type="text">编译原理: 第六章</title>
            <link rel="alternate" type="text/html" href="https://haohui-wang.github.io/posts/compilers-ch6/" />
            <id>https://haohui-wang.github.io/posts/compilers-ch6/</id>
            <updated>2021-05-10T21:36:51&#43;08:00</updated>
            <published>2021-05-09T00:00:00&#43;00:00</published>
            <author>
                    <name>whh530</name>
                    <uri>https://haohui-wang.github.io/</uri>
                    <email>wang.haohui@outlook.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">中间代码生成 中间代码表示 表达式的有向无环图 DAG 和表达式的语法树类似, 一个 DAG 的叶子对应原……</summary>
            
                <content type="html">&lt;h1 id=&#34;中间代码生成&#34;&gt;中间代码生成&lt;/h1&gt;
&lt;h2 id=&#34;中间代码表示&#34;&gt;中间代码表示&lt;/h2&gt;
&lt;h3 id=&#34;表达式的有向无环图-dag&#34;&gt;表达式的有向无环图 DAG&lt;/h3&gt;
&lt;p&gt;和表达式的语法树类似, 一个 DAG 的叶子对应原子运算分量, 内部结点对应运算符, 与语法树不同, 如果 DAG 中的一个结点 $N$ 表示一个公共子表达式, 则 $N$ 可能有许多父结点.&lt;/p&gt;
&lt;p&gt;我们曾使用 SDD (语法制导定义) 来构造语法树, 在那里, 函数 Leaf 和 Node 每次被调用都构造出一个新结点. 我们也可以使用同样的 SDD 构造 DAG, 此时这些函数在每次构造新结点前首先检查是否已存在这样的节点, 如果存在一个已经被创建的节点, 就返回它, 否则创建一个新结点.&lt;/p&gt;
&lt;h3 id=&#34;三地址代码-xy-operatornameop-z&#34;&gt;三地址代码 $x=y \operatorname{op} z$&lt;/h3&gt;
&lt;p&gt;在三地址代码中, 一条指令的右侧最多有一个运算符.&lt;/p&gt;
&lt;p&gt;三地址代码基于两个概念: 地址和指令.&lt;/p&gt;
&lt;p&gt;地址可以具有如下形式之一:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;名字&lt;/li&gt;
&lt;li&gt;常量&lt;/li&gt;
&lt;li&gt;编译器生成的临时变量&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面是几种常见的三地址指令:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;赋值 $x=y\ op\ z$&lt;/li&gt;
&lt;li&gt;赋值 $x=op\ y$&lt;/li&gt;
&lt;li&gt;复制 $x=y$&lt;/li&gt;
&lt;li&gt;无条件转移 $\text{goto }L$&lt;/li&gt;
&lt;li&gt;条件转移 $\text{if }x\text{ goto }L$ 或 $\text{if False }x\text{ goto }L$&lt;/li&gt;
&lt;li&gt;条件转移 $\text{if }x\ relop\ y\text{ goto }L$&lt;/li&gt;
&lt;li&gt;参数传递 $\text{param }x$&lt;/li&gt;
&lt;li&gt;过程调用 $\text{call } p,n$&lt;/li&gt;
&lt;li&gt;带下标的复制 $x=y[i]$ 和 $x[i]=y$&lt;/li&gt;
&lt;li&gt;地址及指针赋值 $x=\&amp;amp;y,x=*y,*x=y$&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;四元式表示&#34;&gt;四元式表示&lt;/h4&gt;
&lt;p&gt;一个四元式包含四个字段 $op,arg_1,arg_2,result$, 其一般规则有如下特例:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单目运算符 $x=\text{minus }y$ 和赋值 $x=y$ 不使用 $arg_2$, 且赋值语句的 $op$ 是 $=$&lt;/li&gt;
&lt;li&gt;$\text{param}$ 既不使用 $arg_2$ 也不使用 $result$&lt;/li&gt;
&lt;li&gt;条件/无条件转移将目标标号放入 $result$&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;三元式表示&#34;&gt;三元式表示&lt;/h4&gt;
&lt;p&gt;一个三元式包含三个字段 $op,arg_1,arg_2$, 使用三元式时用运算 $x\ op\ y$ 的位置来表示其结果, 而不是用一个显式的名字表示, 带括号的数字表示指向相应三元式的指针.&lt;/p&gt;
&lt;h4 id=&#34;间接三元式表示&#34;&gt;间接三元式表示&lt;/h4&gt;
&lt;p&gt;在编译优化中指令的位置会改变, 由于三元式对运算结构的引用是通过运算的位置完成, 所以一旦修改一条指令的位置, 所有引用该指令的结果的指令都需要相应改变, 间接三元式解决了这个问题.&lt;/p&gt;
&lt;p&gt;间接三元式包含了一个指向三元式的指针的列表 $instruction$, 从而编译优化时可以通过对 $instruction$ 列表的重排来改变指令位置但不影响三元式本身内容.&lt;/p&gt;
&lt;h3 id=&#34;静态单赋值形式-ssa&#34;&gt;静态单赋值形式 SSA&lt;/h3&gt;
&lt;p&gt;SSA 是另一种中间表示形式, 其与三地址代码的不同在于:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SSA中所有赋值均支队具有不同名字的变量&lt;/li&gt;
&lt;li&gt;使用一种被称为 $\varphi$ 函数的表示规则将 $x$ 的两处定值合并&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;$\text{if ( flag ) }x_1=-1;\text{ else }x_2=1;$&lt;/p&gt;
&lt;p&gt;$x_3=\varphi(x_1,x_2)$&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;类型检查&#34;&gt;类型检查&lt;/h2&gt;
&lt;h3 id=&#34;类型表达式&#34;&gt;类型表达式&lt;/h3&gt;
&lt;p&gt;类型具有结构, 用类型表达式来表示, 它可以是基本类型, 也可以是通过把类型构造算子作用于类型表达式得到的, 定义如下:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基本类型&lt;/li&gt;
&lt;li&gt;类名&lt;/li&gt;
&lt;li&gt;类型构造算子 $array$ 作用于一个数字和一个类型表达式
&lt;ul&gt;
&lt;li&gt;如 $int[2][3]$ 的类型表达式
$$
array(2,array(3,integer))
$$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;类型构造算子 $record$ 作用于字段名和相应的类型&lt;/li&gt;
&lt;li&gt;类型构造算子 $\to$ 可以构造函数类型的类型表达式, 把“从类型 $s$ 到类型 $t$ 的函数”写成 $s\to t$&lt;/li&gt;
&lt;li&gt;若 $s,t$ 是类型表达式, 则笛卡尔积 $s\times t$ 是类型表达式
&lt;ul&gt;
&lt;li&gt;如 $struct \{ int\ a[10]; float\ f; \} st;$ 的类型表达式
$$
record((a\times array(0..9, int)) \times (f \times real))
$$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;取值为类型表达式的变量&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;类型等价&#34;&gt;类型等价&lt;/h3&gt;
&lt;p&gt;类型表达式&lt;strong&gt;结构等价&lt;/strong&gt;当且仅当:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;它们是相同的基本类型, 或&lt;/li&gt;
&lt;li&gt;是将相同的类型构造算子作用于结构等价的类型得到, 或&lt;/li&gt;
&lt;li&gt;一个是另一个类型表达式的名字&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;假设类型名仅仅代表自身, 则前两个条件定义了&lt;strong&gt;名等价&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id=&#34;声明&#34;&gt;声明&lt;/h3&gt;
&lt;p&gt;处理基本类型, 数组类型和记录类型的声明的文法:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$D\to T\ id; D|\varepsilon$&lt;/li&gt;
&lt;li&gt;$T\to B C | record\{D\}$&lt;/li&gt;
&lt;li&gt;$B\to int | float$&lt;/li&gt;
&lt;li&gt;$C\to\varepsilon|[num]C$&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;局部变量名的存储布局&#34;&gt;局部变量名的存储布局&lt;/h3&gt;
&lt;p&gt;从变量类型可以知道变量在运行时刻需要的内存, 即类型的宽度(该类型一个对象需要的存储单元的数量), 变量往往被分配在一段连续区间中并以初始字节的地址作为其地址. 在编译时刻我们可以使用名字的类型的宽度为每个名字分配一个相对地址, 名字的类型和相对地址保存在符号表中.&lt;/p&gt;
&lt;p&gt;如下 SDT 计算了接本类型和数组类型及其宽度:&lt;/p&gt;
&lt;p&gt;每个非终结符号具有综合属性 $type$ 和 $width$, 全局变量 $t$ 和 $w$ 的用途是将类型和宽度信息从 $B$ 传递到 $C\to\epsilon$, 相当于 $C$ 的继承属性 (也可以把 $t,w$ 替换为 $C.t$ 和 $C.w$).&lt;/p&gt;
&lt;h3 id=&#34;声明序列&#34;&gt;声明序列&lt;/h3&gt;
&lt;h3 id=&#34;记录和类中的字段&#34;&gt;记录和类中的字段&lt;/h3&gt;
&lt;h2 id=&#34;中间代码生成-1&#34;&gt;中间代码生成&lt;/h2&gt;
</content>
            
            
            
            
            
                
                    
                
                    
                
            
        </entry>
    
        <entry>
            <title type="text">TODO List</title>
            <link rel="alternate" type="text/html" href="https://haohui-wang.github.io/posts/2021-05-06-1/" />
            <id>https://haohui-wang.github.io/posts/2021-05-06-1/</id>
            <updated>2021-05-10T21:25:41&#43;08:00</updated>
            <published>2021-05-06T00:00:00&#43;00:00</published>
            <author>
                    <name>whh530</name>
                    <uri>https://haohui-wang.github.io/</uri>
                    <email>wang.haohui@outlook.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">to read 站在两个世界的边缘 - 程浩 理解媒介 - 马歇尔·麦克卢汉 坏世界研究 - 赵汀阳 to travel 山阴路 石……</summary>
            
                <content type="html">&lt;h2 id=&#34;to-read&#34;&gt;to read&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 站在两个世界的边缘 - 程浩&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 理解媒介 - 马歇尔·麦克卢汉&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 坏世界研究 - 赵汀阳&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;to-travel&#34;&gt;to travel&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 山阴路&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 石臼湖&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;to-watch&#34;&gt;to watch&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 敦刻尔克 - 克里斯托弗·诺兰&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 无依之地 - 赵婷&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 地久天长 - 王小帅&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 小森林&lt;/li&gt;
&lt;/ul&gt;
</content>
            
            
            
            
            
                
                    
                
                    
                
            
        </entry>
    
        <entry>
            <title type="text">新篇</title>
            <link rel="alternate" type="text/html" href="https://haohui-wang.github.io/posts/2021-05-06/" />
            <id>https://haohui-wang.github.io/posts/2021-05-06/</id>
            <updated>2021-05-10T20:57:03&#43;08:00</updated>
            <published>2021-05-06T00:00:00&#43;00:00</published>
            <author>
                    <name>whh530</name>
                    <uri>https://haohui-wang.github.io/</uri>
                    <email>wang.haohui@outlook.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">新 Blog 放这了, 不清楚会不会用, 敬请期待.</summary>
            
                <content type="html">&lt;p&gt;新 Blog 放这了, 不清楚会不会用, 敬请期待.&lt;/p&gt;
</content>
            
            
            
            
            
                
                    
                
                    
                
            
        </entry>
    
        <entry>
            <title type="text">驳网络上关于亲密关系的一些论断</title>
            <link rel="alternate" type="text/html" href="https://haohui-wang.github.io/posts/%E4%BA%B2%E5%AF%86%E5%85%B3%E7%B3%BB/" />
            <id>https://haohui-wang.github.io/posts/%E4%BA%B2%E5%AF%86%E5%85%B3%E7%B3%BB/</id>
            <updated>2021-05-10T18:36:46&#43;08:00</updated>
            <published>2021-05-06T00:00:00&#43;00:00</published>
            <author>
                    <name>whh530</name>
                    <uri>https://haohui-wang.github.io/</uri>
                    <email>wang.haohui@outlook.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">1 如果喜欢你让我不快乐了, 那我宁愿不喜欢你. “不快乐”这个结果是“喜欢你”直接造成的……</summary>
            
                <content type="html">&lt;h1 id=&#34;1&#34;&gt;1&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;如果喜欢你让我不快乐了, 那我宁愿不喜欢你.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;“不快乐”这个结果是“喜欢你”直接造成的吗? 显然不是, “喜欢你”导致了诸多事件的发生, 这些事件中有一些产生了消极影响, 造成了“不快乐”的结果, 存在问题就解决问题, 是沟通问题, 观念问题, 生活习惯问题? 确定问题后冷静思考有没有办法解决? 这才是良性的思考闭环. 而不是“既然不快乐, 干脆一股脑扔掉就好了”, 那不叫喜欢一个人, 那只是喜欢&amp;quot;喜欢一个人&amp;quot;的美好感觉罢了, 那么一旦发现这种感觉并不像开始时想象的那样美好了, 这段关系就没什么可留恋了.&lt;/p&gt;
</content>
            
            
            
            
            
                
                    
                
                    
                
            
        </entry>
    
</feed>
